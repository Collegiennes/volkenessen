using System.Collections.Generic;
using System.Linq;
using UnityEngine;

class PlayerControl : MonoBehaviour
{
    const float HitDistance = 0.75f;
    const float BodySize = 2f;
    const float WalledImpulse = 30;
    const float DashImpulse = 16;
    const float Cooldown = 0.25f;
    const float AutoBalancingFactor = 0.1f;

    static readonly Dictionary<string, Dictionary<Direction, string[]>> ButtonMap = new Dictionary<string, Dictionary<Direction, string[]>>
    {
        { "Controller (XBOX 360 For Windows)", new Dictionary<Direction, string[]>
            {
                { Direction.Up, new [] { "1-" } },
                { Direction.Down, new [] { "4-" } },
                { Direction.Left, new [] { "2-" } },
                { Direction.Right, new [] { "3-" } },
            } 
        },
        { "Logitech(R) Precision(TM) Gamepad", new Dictionary<Direction, string[]>
            {
                { Direction.Up, new [] { "2-" } },
                { Direction.Down, new [] { "4-" } },
                { Direction.Left, new [] { "3-" } },
                { Direction.Right, new [] { "1-" } },
            } 
        }
    };

    //IKeyboard Keyboard;

    //public KeyCode HitUpKey, HitDownKey, HitLeftKey, HitRightKey;
    public int PlayerIndex;
    ComplexButtonState UpState, DownState, LeftState, RightState;

    float ArmCooldown, LegCooldown;

    readonly Dictionary<Direction, GameObject[]> Arms = new Dictionary<Direction, GameObject[]>();
    readonly Dictionary<Direction, GameObject> Legs = new Dictionary<Direction, GameObject>();
    readonly Dictionary<Direction, GameObject> Ears = new Dictionary<Direction, GameObject>();

    void Start()
    {
        //Keyboard = KeyboardManager.Instance;
        //Keyboard.RegisterKey(HitUpKey);
        //Keyboard.RegisterKey(HitDownKey);
        //Keyboard.RegisterKey(HitLeftKey);
        //Keyboard.RegisterKey(HitRightKey);

        Arms.Add(Direction.Up, new [] { gameObject.FindChild("ArmLeftUp"), gameObject.FindChild("ArmRightUp") });
        Arms.Add(Direction.Down, new[] { gameObject.FindChild("ArmLeftDown"), gameObject.FindChild("ArmRightDown") });

        Legs.Add(Direction.Left, gameObject.FindChild("LegLeft"));
        Legs.Add(Direction.Right, gameObject.FindChild("LegRight"));

        Ears.Add(Direction.Left, gameObject.FindChild("EarLeft"));
        Ears.Add(Direction.Right, gameObject.FindChild("EarRight"));

        foreach (var l in Legs.Values) { l.transform.position += new Vector3(0, 1, 0); l.renderer.enabled = false; }
        foreach (var e in Ears.Values) { e.transform.position += new Vector3(0, -1, 0); e.renderer.enabled = false; }
        foreach (var armSet in Arms.Values)
        {
            armSet[0].transform.position += new Vector3(1, 0, 0);
            armSet[1].transform.position -= new Vector3(1, 0, 0);
            armSet[0].renderer.enabled = armSet[1].renderer.enabled = false;
        }
    }

    void Update()
    {
        // Base rotation
        var angle = -transform.localRotation.eulerAngles.z;

        var vertical = Input.GetAxis("Vertical" + PlayerIndex);
        var horizontal = Input.GetAxis("Horizontal" + PlayerIndex);
        var controllerName = Input.GetJoystickNames()[PlayerIndex - 1];

        //var one = Input.GetButtonDown("1-" + PlayerIndex);
        //var two = Input.GetButtonDown("2-" + PlayerIndex);
        //var three = Input.GetButtonDown("3-" + PlayerIndex);
        //var four = Input.GetButtonDown("4-" + PlayerIndex);

        //if (one) Debug.Log("1-" + PlayerIndex + " ~ " + Input.GetJoystickNames()[PlayerIndex - 1]);
        //if (two) Debug.Log("2-" + PlayerIndex + " ~ " + Input.GetJoystickNames()[PlayerIndex - 1]);
        //if (three) Debug.Log("3-" + PlayerIndex + " ~ " + Input.GetJoystickNames()[PlayerIndex - 1]);
        //if (four) Debug.Log("4-" + PlayerIndex + " ~ " + Input.GetJoystickNames()[PlayerIndex - 1]);

        if (vertical > 0.5f && UpState == ComplexButtonState.Up) { UpState = ComplexButtonState.Down; DoAppropriateAttack(angle + 180); }
        if (UpState == ComplexButtonState.Down && vertical < 0.5f) UpState = ComplexButtonState.Up;
        foreach (var button in ButtonMap[controllerName][Direction.Down])
            if (Input.GetButtonDown(button + PlayerIndex)) DoAppropriateAttack(angle + 180);
        //if (Keyboard.GetKeyState(HitDownKey).State == ComplexButtonState.Pressed)

        if (vertical < -0.5f && DownState == ComplexButtonState.Up) { DownState = ComplexButtonState.Down; DoAppropriateAttack(angle); }
        if (DownState == ComplexButtonState.Down && vertical > -0.5f) DownState = ComplexButtonState.Up;
        foreach (var button in ButtonMap[controllerName][Direction.Up])
            if (Input.GetButtonDown(button + PlayerIndex)) DoAppropriateAttack(angle);
        //if (Keyboard.GetKeyState(HitUpKey).State == ComplexButtonState.Pressed)

        if (horizontal < -0.5f && LeftState == ComplexButtonState.Up) { LeftState = ComplexButtonState.Down; DoAppropriateAttack(angle - 90); }
        if (LeftState == ComplexButtonState.Down && horizontal > -0.5f) LeftState = ComplexButtonState.Up;
        foreach (var button in ButtonMap[controllerName][Direction.Left])
            if (Input.GetButtonDown(button + PlayerIndex)) DoAppropriateAttack(angle - 90);
        //if (Keyboard.GetKeyState(HitLeftKey).State == ComplexButtonState.Pressed)

        if (horizontal > 0.5f && RightState == ComplexButtonState.Up) { RightState = ComplexButtonState.Down; DoAppropriateAttack(angle + 90); }
        if (RightState == ComplexButtonState.Down && horizontal < 0.5f) RightState = ComplexButtonState.Up;
        foreach (var button in ButtonMap[controllerName][Direction.Right])
            if (Input.GetButtonDown(button + PlayerIndex)) DoAppropriateAttack(angle + 90);
        //if (Keyboard.GetKeyState(HitRightKey).State == ComplexButtonState.Pressed)

        //if (Keyboard.GetKeyState(EatKey).State == ComplexButtonState.Pressed)
        //{
        //    // TODO : ESSEN
        //}

        // Try to keep upright
        var currentUp = new Vector2(Mathf.Cos(Mathf.Deg2Rad * angle), Mathf.Sin(Mathf.Deg2Rad * angle));
        var targetUp = new Vector2(0, 1);
        var autoBalancing = (2 - (Vector2.Dot(targetUp, currentUp) + 1)) / 2;
        Debug.Log(autoBalancing);
        rigidbody.AddTorque(Vector3.forward * autoBalancing * Mathf.Sign(targetUp.x - currentUp.x), ForceMode.Force);
    }

    void DoAppropriateAttack(float angle)
    {
        // Wrap angle to [0, 360]
        angle = angle % 360;
        if (angle < 0) angle += 360;

        // Choose member!
        if (angle <= 45 || angle > 315)
            EarAttack();
        else if (angle > 45 && angle <= 135)
            ArmAttack(Direction.Right);
        else if (angle > 135 && angle <= 225)
            LegAttack();
        else /* if (angle > 225 && angle <= 315) */
            ArmAttack(Direction.Left);
    }

    void ArmAttack(Direction hitDirection)
    {
        var upIsBusy = Arms[Direction.Up][0].renderer.enabled || Arms[Direction.Up][1].renderer.enabled;
        var downIsBusy = Arms[Direction.Down][0].renderer.enabled || Arms[Direction.Down][1].renderer.enabled;

        Direction armHeight;
        if (upIsBusy && downIsBusy) armHeight = Direction.None;
        else if (!upIsBusy && !downIsBusy) armHeight = RandomHelper.Probability(0.5) ? Direction.Up : Direction.Down;
        else if (upIsBusy) armHeight = Direction.Down;
        else /* if (downIsBusy) */ armHeight = Direction.Up;

        if (armHeight != Direction.None)
        {
            var armToUse = Arms[armHeight][hitDirection == Direction.Left ? 0 : 1];
            if (armToUse.renderer.enabled) return;

            var hitVector = Quaternion.AngleAxis(-transform.localRotation.eulerAngles.z, Vector3.forward) * hitDirection.ToVector();
            var impulse = CheckForWall(hitVector) ? WalledImpulse : DashImpulse;
            rigidbody.AddForce(-hitVector * impulse, ForceMode.Impulse);

            armToUse.renderer.enabled = true;

            var initialOffset = new Vector3(hitDirection.ToVector().x * -1, 0, 0);
            var origin = armToUse.transform.localPosition;
            armToUse.transform.localPosition = origin + initialOffset;

            Wait.Until(elapsed =>
            {
                var step = Easing.EaseOut(1 - Mathf.Clamp01(elapsed / Cooldown), EasingType.Cubic);
                armToUse.transform.localPosition = origin + initialOffset * step;
                return step == 0;
            },
            () => { armToUse.renderer.enabled = false; });
        }
    }

    void LegAttack()
    {
        var hitDirection = Vector3.down;

        var leftIsBusy = Legs[Direction.Left].renderer.enabled;
        var rightIsBusy = Legs[Direction.Right].renderer.enabled;

        Direction legSide;
        if (leftIsBusy && rightIsBusy) legSide = Direction.None;
        else if (!leftIsBusy && !rightIsBusy) legSide = RandomHelper.Probability(0.5) ? Direction.Left : Direction.Right;
        else if (leftIsBusy) legSide = Direction.Right;
        else /* if (rightIsBusy) */ legSide = Direction.Left;

        if (legSide != Direction.None)
        {
            var hitVector = Quaternion.AngleAxis(-transform.localRotation.eulerAngles.z, Vector3.forward) * hitDirection;

            var impulse = CheckForWall(hitVector) ? WalledImpulse : DashImpulse;
            rigidbody.AddForce(-hitVector * impulse, ForceMode.Impulse);

            var legToUse = Legs[legSide];
            legToUse.renderer.enabled = true;

            var initialOffset = new Vector3(0, -1, 0);
            var origin = legToUse.transform.localPosition;
            legToUse.transform.localPosition = origin + initialOffset;

            Wait.Until(elapsed =>
            {
                var step = Easing.EaseOut(1 - Mathf.Clamp01(elapsed / Cooldown), EasingType.Cubic);
                legToUse.transform.localPosition = origin + initialOffset * step;
                return step == 0;
            },
            () => { legToUse.renderer.enabled = false; });
        }
    }

    void EarAttack()
    {
        var hitDirection = Vector3.up;

        var leftIsBusy = Ears[Direction.Left].renderer.enabled;
        var rightIsBusy = Ears[Direction.Right].renderer.enabled;

        Direction earSide;
        if (leftIsBusy && rightIsBusy) earSide = Direction.None;
        else if (!leftIsBusy && !rightIsBusy) earSide = RandomHelper.Probability(0.5) ? Direction.Left : Direction.Right;
        else if (leftIsBusy) earSide = Direction.Right;
        else /* if (rightIsBusy) */ earSide = Direction.Left;

        if (earSide != Direction.None)
        {
            var hitVector = Quaternion.AngleAxis(-transform.localRotation.eulerAngles.z, Vector3.forward) * hitDirection;

            var impulse = CheckForWall(hitVector) ? WalledImpulse : DashImpulse;
            rigidbody.AddForce(-hitVector * impulse, ForceMode.Impulse);

            var earToUse = Ears[earSide];
            earToUse.renderer.enabled = true;

            var initialOffset = new Vector3(0, 1, 0);
            var origin = earToUse.transform.localPosition;
            earToUse.transform.localPosition = origin + initialOffset;

            Wait.Until(elapsed =>
            {
                var step = Easing.EaseOut(1 - Mathf.Clamp01(elapsed / Cooldown), EasingType.Cubic);
                earToUse.transform.localPosition = origin + initialOffset * step;
                return step == 0;
            },
            () => { earToUse.renderer.enabled = false; });
        }
    }

    bool CheckForWall(Vector3 direction)
    {
        var ray = new Ray
        {
            direction = direction,
            origin = transform.position + BodySize / 2 * direction - direction * 0.1f
        };
        RaycastHit info;
        var collided = Physics.Raycast(ray, out info, HitDistance) && info.collider != collider;

        // Enemy recoil
        if (info.rigidbody != null && info.rigidbody != rigidbody)
        {
            info.rigidbody.AddForce(direction * DashImpulse, ForceMode.Impulse);
            return false;
        }

        return collided;
    }

    void OnCollisionEnter(Collision collision)
    {
        if (collision.rigidbody == null) return;

        // TODO : DAMAGE
    }
}
